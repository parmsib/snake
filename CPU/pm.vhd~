library ieee ;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity pm is
	port(	buss : in std_logic_vector(15 downto 0);
			clk : in std_logic;
			adr : in std_logic_vector(11 downto 0);
			frombus : in std_logic_vector(3 downto 0);
			bpm : out std_logic_vector(15 downto 0)
		);
end pm;

architecture behav of pm is
	type MEM is array(0 to 4095) of std_logic_vector(15 downto 0);
	signal pmem : MEM := (

0 => B"000000_0000_00_0000", -- NOPs
1 => B"000000_0000_00_0000", -- NOPs
-- MENU -- 2
2 => B"010111_1001_00_0000", -- "LOAD #$000F, Gr9" ; 
3 => "0000000000001111", -- 15
4 => B"010111_1010_00_0000", -- "LOAD #32, Gr10 " ; 
5 => "0000000000100000", -- 32
6 => B"010111_1011_00_0000", -- "LOAD #32, Gr11 " ; 
7 => "0000000000100000", -- 32
8 => B"010111_1100_00_0000", -- "LOAD #0, Gr12 " ; 
9 => "0000000000000000", -- 0
10 => B"010111_1101_00_0000", -- "LOAD #0, Gr13 " ; 
11 => "0000000000000000", -- 0
12 => B"010111_1111_00_0000", -- "LOAD #$B00, Gr15 " ; 
13 => "0000101100000000",
14 => B"010111_1110_00_0000", -- "LOAD #MENURETURN, Gr14 " ;  -- 2
15 => "0000000000010010", -- 18
16 => B"001001_0000_00_0000", -- "BRA #PRINT " ;  -- 814
17 => "0000001100101110", -- 814
-- MENURETURN -- 2
-- MENULOOP -- 2
18 => B"011001_0000_00_0000", -- "SPI Gr0" ;  ladda SPI-data till gr0
19 => "0000000000000000", -- 0
20 => B"000101_0000_00_0000", -- "AND #$000F, Gr0" ;  anda bort andra joysticks
21 => "0000000000001111", -- 15
22 => B"000100_0000_00_0000", -- "CMP #1, Gr0" ; 
23 => "0000000000000001", -- 1
24 => B"001011_0000_00_0000", -- "BEQ #UPDIRSPEED" ;  -- 40
25 => "0000000000101000", -- 40
26 => B"000100_0000_00_0000", -- "CMP #2, Gr0" ; 
27 => "0000000000000010", -- 2
28 => B"001011_0000_00_0000", -- "BEQ #RIGHTDIRSPEED" ;  -- 44
29 => "0000000000101100", -- 44
30 => B"000100_0000_00_0000", -- "CMP #3, Gr0" ; 
31 => "0000000000000011", -- 3
32 => B"001011_0000_00_0000", -- "BEQ #DOWNDIRSPEED" ;  -- 48
33 => "0000000000110000", -- 48
34 => B"000100_0000_00_0000", -- "CMP #4, Gr0" ; 
35 => "0000000000000100", -- 4
36 => B"001011_0000_00_0000", -- "BEQ #LEFTDIRSPEED" ;  -- 52
37 => "0000000000110100", -- 52
38 => B"001001_0000_00_0000", -- "BRA #MENULOOP" ;  var inget hÃÂ¥ll, fortsÃÂ¤tt kolla. -- 2
39 => "0000000000010010", -- 18
-- UPDIRSPEED -- 40
40 => B"010111_0000_00_0000", -- "LOAD  #$000F, Gr0" ; 
41 => "0000000000001111", -- 15
42 => B"001001_0000_00_0000", -- "BRA #STORESPEED" ;  -- 56
43 => "0000000000111000", -- 56
-- RIGHTDIRSPEED -- 44
44 => B"010111_0000_00_0000", -- "LOAD  #$000A, Gr0" ; 
45 => "0000000000001010", -- 10
46 => B"001001_0000_00_0000", -- "BRA #STORESPEED," ;  -- 56
47 => "0000000000111000", -- 56
-- DOWNDIRSPEED -- 48
48 => B"010111_0000_00_0000", -- "LOAD  #$0006, Gr0" ; 
49 => "0000000000000110", -- 6
50 => B"001001_0000_00_0000", -- "BRA #STORESPEED" ;  -- 56
51 => "0000000000111000", -- 56
-- LEFTDIRSPEED -- 52
52 => B"010111_0000_00_0000", -- "LOAD  #$0004, Gr0" ; 
53 => "0000000000000100", -- 4
54 => B"001001_0000_00_0000", -- "BRA #STORESPEED" ;  -- 56
55 => "0000000000111000", -- 56
-- STORESPEED -- 56
56 => B"010110_0000_01_0000", -- "STORE $A31, Gr0" ;  lÃÂ¤gg in vald hastighet pÃÂ¥ rÃÂ¤tt minnesplats
57 => "0000101000110001",
-- MENU2 -- 2
58 => B"010111_1001_00_0000", -- "LOAD #$000F, Gr9" ; 
59 => "0000000000001111", -- 15
60 => B"010111_1010_00_0000", -- "LOAD #32, Gr10 " ; 
61 => "0000000000100000", -- 32
62 => B"010111_1011_00_0000", -- "LOAD #7, Gr11 " ; 
63 => "0000000000000111", -- 7
64 => B"010111_1100_00_0000", -- "LOAD #0, Gr12 " ; 
65 => "0000000000000000", -- 0
66 => B"010111_1101_00_0000", -- "LOAD #1, Gr13 " ; 
67 => "0000000000000001", -- 1
68 => B"010111_1111_00_0000", -- "LOAD #$C5C, Gr15 " ; 
69 => "0000110001011100",
70 => B"010111_1110_00_0000", -- "LOAD #MENU2RETURN, Gr14 " ;  -- 2
71 => "0000000001001010", -- 74
72 => B"001001_0000_00_0000", -- "BRA #PRINT " ;  -- 814
73 => "0000001100101110", -- 814
-- MENU2RETURN -- 2
-- RESETSPI -- 74
74 => B"011001_0000_00_0000", -- "SPI Gr0 " ; 
75 => "0000000000000000", -- 0
76 => B"000101_0000_00_0000", -- "AND #$000F, Gr0 " ; 
77 => "0000000000001111", -- 15
78 => B"000100_0000_00_0000", -- "CMP #$0000, Gr0" ; 
79 => "0000000000000000", -- 0
80 => B"001010_0000_00_0000", -- "BNE #RESETSPI " ;  -- 74
81 => "0000000001001010", -- 74
-- MENU2LOOP -- 2
82 => B"011001_0000_00_0000", -- "SPI Gr0" ;  ladda SPI-data till gr0
83 => "0000000000000000", -- 0
84 => B"000101_0000_00_0000", -- "AND #$000F, Gr0" ;  anda bort andra joysticks
85 => "0000000000001111", -- 15
86 => B"000100_0000_00_0000", -- "CMP #1, Gr0" ; 
87 => "0000000000000001", -- 1
88 => B"001011_0000_00_0000", -- "BEQ #UPDIRPLAYERS" ;  -- 104
89 => "0000000001101000", -- 104
90 => B"000100_0000_00_0000", -- "CMP #2, Gr0" ; 
91 => "0000000000000010", -- 2
92 => B"001011_0000_00_0000", -- "BEQ #RIGHTDIRPLAYERS" ;  -- 108
93 => "0000000001101100", -- 108
94 => B"000100_0000_00_0000", -- "CMP #3, Gr0" ; 
95 => "0000000000000011", -- 3
96 => B"001011_0000_00_0000", -- "BEQ #DOWNDIRPLAYERS" ;  -- 112
97 => "0000000001110000", -- 112
98 => B"000100_0000_00_0000", -- "CMP #4, Gr0" ; 
99 => "0000000000000100", -- 4
100 => B"001011_0000_00_0000", -- "BEQ #LEFTDIRPLAYERS" ;  -- 116
101 => "0000000001110100", -- 116
102 => B"001001_0000_00_0000", -- "BRA #MENU2LOOP" ;  var inget hÃÂ¥ll, fortsÃÂ¤tt kolla. -- 2
103 => "0000000001010010", -- 82
-- UPDIRPLAYERS -- 104
104 => B"010111_0000_00_0000", -- "LOAD  #$0001, Gr0" ; 
105 => "0000000000000001", -- 1
106 => B"001001_0000_00_0000", -- "BRA #STOREPLAYERS" ;  -- 120
107 => "0000000001111000", -- 120
-- RIGHTDIRPLAYERS -- 108
108 => B"010111_0000_00_0000", -- "LOAD  #$0002, Gr0" ; 
109 => "0000000000000010", -- 2
110 => B"001001_0000_00_0000", -- "BRA #STOREPLAYERS," ;  -- 120
111 => "0000000001111000", -- 120
-- DOWNDIRPLAYERS -- 112
112 => B"010111_0000_00_0000", -- "LOAD  #$0003, Gr0" ; 
113 => "0000000000000011", -- 3
114 => B"001001_0000_00_0000", -- "BRA #STOREPLAYERS" ;  -- 120
115 => "0000000001111000", -- 120
-- LEFTDIRPLAYERS -- 116
116 => B"010111_0000_00_0000", -- "LOAD  #$0004, Gr0" ; 
117 => "0000000000000100", -- 4
118 => B"001001_0000_00_0000", -- "BRA #STOREPLAYERS" ;  -- 120
119 => "0000000001111000", -- 120
-- STOREPLAYERS -- 120
120 => B"010110_0000_01_0000", -- "STORE $A32, Gr0" ;  lÃÂ¤gg in vald hastighet pÃÂ¥ rÃÂ¤tt minnesplats
121 => "0000101000110010",
122 => B"010111_1110_00_0000", -- "LOAD #MENU3, Gr14 " ;  -- 2
123 => "0000000010000000", -- 128
124 => B"010111_1111_00_0000", -- "LOAD #$0000, Gr15 " ; 
125 => "0000000000000000", -- 0
126 => B"001001_0000_00_0000", -- "BRA #CLEARSCREEN " ;  -- 908
127 => "0000001110001100", -- 908
-- MENU3 -- 2
128 => B"010111_1001_00_0000", -- "LOAD #$000F, Gr9" ; 
129 => "0000000000001111", -- 15
130 => B"010111_1010_00_0000", -- "LOAD #32, Gr10 " ; 
131 => "0000000000100000", -- 32
132 => B"010111_1011_00_0000", -- "LOAD #20, Gr11 " ; 
133 => "0000000000010100", -- 20
134 => B"010111_1100_00_0000", -- "LOAD #0, Gr12 " ; 
135 => "0000000000000000", -- 0
136 => B"010111_1101_00_0000", -- "LOAD #11, Gr13 " ; 
137 => "0000000000001011", -- 11
138 => B"010111_1111_00_0000", -- "LOAD #$CDC, Gr15 " ; 
139 => "0000110011011100",
140 => B"010111_1110_00_0000", -- "LOAD #MENU3RETURN1, Gr14 " ;  -- 2
141 => "0000000010010000", -- 144
142 => B"001001_0000_00_0000", -- "BRA #PRINT " ;  -- 814
143 => "0000001100101110", -- 814
-- MENU3RETURN1 -- 2
144 => B"010111_1001_00_0000", -- "LOAD #$000F, Gr9" ; 
145 => "0000000000001111", -- 15
146 => B"010111_1010_00_0000", -- "LOAD #22, Gr10 " ; 
147 => "0000000000010110", -- 22
148 => B"010111_1011_00_0000", -- "LOAD #28, Gr11 " ; 
149 => "0000000000011100", -- 28
150 => B"010111_1100_00_0000", -- "LOAD #14, Gr12 " ; 
151 => "0000000000001110", -- 14
152 => B"010111_1101_00_0000", -- "LOAD #23, Gr13 " ; 
153 => "0000000000010111", -- 23
154 => B"010111_1111_00_0000", -- "LOAD #$D2A, Gr15 " ; 
155 => "0000110100101010",
156 => B"010111_1110_00_0000", -- "LOAD #MENU3RETURN2, Gr14 " ;  -- 2
157 => "0000000010100010", -- 162
158 => B"011100_0000_00_0000", -- "BREAK #0, Gr0 " ; 
159 => "0000000000000000", -- 0
160 => B"001001_0000_00_0000", -- "BRA #PRINT " ;  -- 814
161 => "0000001100101110", -- 814
-- MENU3RETURN2 -- 2
162 => B"010111_0000_00_0000", -- "LOAD #0, Gr0" ; 
163 => "0000000000000000", -- 0
-- UARTLOOP -- 164
164 => B"010000_0000_00_0000", -- "BOU #UARTREADY " ; kolla om uart har ett word redo att hÃÂ¤mtas -- 168
165 => "0000000010101000", -- 168
166 => B"001001_0000_00_0000", -- "BRA #UARTLOOP " ; fortsÃÂ¤tt vÃÂ¤nta -- 164
167 => "0000000010100100", -- 164
-- UARTREADY -- 168
168 => B"011010_0001_00_0000", -- "UART Gr1" ;  ladda Uart-wordet till Gr1
169 => "0000000000000000", -- 0
170 => B"010110_0001_11_0000", -- "STORE $DB0, Gr1, Gr0" ;  LÃÂ¤gg till wordet pÃÂ¥ rÃÂ¤tt stÃÂ¤lle. anvÃÂ¤nder Gr0 som index
171 => "0000110110110000",
172 => B"000001_0000_00_0000", -- "ADD #1, Gr0" ;  incrementera countern
173 => "0000000000000001", -- 1
174 => B"000100_0000_00_0000", -- "CMP #64, Gr0" ;  kolla om vi ÃÂ¤r fÃÂ¤rdiga
175 => "0000000001000000", -- 64
176 => B"001011_0000_00_0000", -- "BEQ #STARTLIGHT" ;  isf, hoppa till spelet -- 180
177 => "0000000010110100", -- 180
178 => B"001001_0000_00_0000", -- "BRA #UARTLOOP" ;  annars, fortsÃÂ¤tt leta words -- 164
179 => "0000000010100100", -- 164
-- STARTLIGHT -- 180
180 => B"010111_0101_00_0000", -- "LOAD #$0003, Gr5" ; 
181 => "0000000000000011", -- 3
-- STARTLIGHTLOOP -- 180
182 => B"000001_0101_00_0000", -- "ADD #1, Gr5" ; 
183 => "0000000000000001", -- 1
184 => B"010110_0101_01_0000", -- "STORE $F50, Gr5" ; 
185 => "0000111101010000",
186 => B"010111_1001_01_0000", -- "LOAD $F50, Gr9" ; 
187 => "0000111101010000",
188 => B"010111_1010_00_0000", -- "LOAD #22, Gr10 " ; 
189 => "0000000000010110", -- 22
190 => B"010111_1011_00_0000", -- "LOAD #28, Gr11 " ; 
191 => "0000000000011100", -- 28
192 => B"010111_1100_00_0000", -- "LOAD #14, Gr12 " ; 
193 => "0000000000001110", -- 14
194 => B"010111_1101_00_0000", -- "LOAD #23, Gr13 " ; 
195 => "0000000000010111", -- 23
196 => B"010111_1111_00_0000", -- "LOAD #$D2A, Gr15 " ; 
197 => "0000110100101010",
198 => B"010111_1110_00_0000", -- "LOAD #STARTLIGHTRETURN, Gr14 " ;  -- 180
199 => "0000000011001010", -- 202
200 => B"001001_0000_00_0000", -- "BRA #PRINT " ;  -- 814
201 => "0000001100101110", -- 814
-- STARTLIGHTRETURN -- 180
202 => B"010111_0100_00_0000", -- "LOAD #0, Gr4 " ; 
203 => "0000000000000000", -- 0
204 => B"010111_0110_00_0000", -- "LOAD #0, Gr6" ; 
205 => "0000000000000000", -- 0
-- STARTLIGHTRETURNLOOP -- 180
206 => B"000001_0100_00_0000", -- "ADD #1, Gr4 " ; 
207 => "0000000000000001", -- 1
208 => B"000100_0100_00_0000", -- "CMP #$FFFF, Gr4 " ; 
209 => "1111111111111111",
210 => B"001010_0000_00_0000", -- "BNE #STARTLIGHTRETURNLOOP " ;  -- 180
211 => "0000000011001110", -- 206
212 => B"010111_0100_00_0000", -- "LOAD #0, Gr4 " ; 
213 => "0000000000000000", -- 0
214 => B"000001_0110_00_0000", -- "ADD #1, Gr6" ; 
215 => "0000000000000001", -- 1
216 => B"000100_0110_00_0000", -- "CMP #$002F, Gr6" ; 
217 => "0000000000101111", -- 47
218 => B"001010_0000_00_0000", -- "BNE #STARTLIGHTRETURNLOOP " ;  -- 180
219 => "0000000011001110", -- 206
220 => B"010111_0101_01_0000", -- "LOAD $F50, Gr5" ; 
221 => "0000111101010000",
222 => B"000100_0101_00_0000", -- "CMP #$0006, Gr5 " ; 
223 => "0000000000000110", -- 6
224 => B"001010_0000_00_0000", -- "BNE #STARTLIGHTLOOP " ;  -- 180
225 => "0000000010110110", -- 182
-- GAME -- 226
226 => B"010111_1001_00_0000", -- "LOAD #0, Gr9" ;  Gr9 = current orm
227 => "0000000000000000", -- 0
-- INITLOOP -- 228
228 => B"010110_1001_01_0000", -- "STORE $A21, Gr9" ; 
229 => "0000101000100001",
230 => B"010111_0000_11_1001", -- "LOAD $A54, Gr0, Gr9" ;  Ladda konstanten fÃÂ¤rg
231 => "0000101001010100",
232 => B"010110_0000_11_1001", -- "STORE $A00, Gr0, Gr9" ;  Spara fÃÂ¤rgen fÃÂ¶r ormX
233 => "0000101000000000",
234 => B"010111_0000_11_1001", -- "LOAD $A58, Gr0, Gr9 " ;  Ladda start riktning
235 => "0000101001011000",
236 => B"010110_0000_11_1001", -- "STORE $A04, Gr0, Gr9 " ;  Spara ormX riktning
237 => "0000101000000100",
238 => B"010110_0000_11_1001", -- "STORE $A18, Gr0, Gr9 " ;  Spara ormX prevRiktning
239 => "0000101000011000",
240 => B"010111_0001_00_0000", -- "LOAD #1, Gr1" ; 	Ladda in Head Pointer till arrpos 1
241 => "0000000000000001", -- 1
242 => B"010110_0001_11_1001", -- "STORE $A10, Gr1, Gr9" ; 
243 => "0000101000010000",
244 => B"010111_0001_00_0000", -- "LOAD #0, Gr1" ;   Ladda in Tail Pointer till arrpos 0
245 => "0000000000000000", -- 0
246 => B"010110_0001_11_1001", -- "STORE $A14, Gr1, Gr9" ; 
247 => "0000101000010100",
248 => B"010110_0001_11_1001", -- "STORE $A1C, Gr1, Gr9" ;  Spara 0 som ormX score
249 => "0000101000011100",
250 => B"010111_0000_11_1001", -- "LOAD $A50, Gr0, Gr9 " ;  Ladda Start Pos
251 => "0000101001010000",
252 => B"010111_1000_01_0000", -- "LOAD $A21, Gr8" ; 	Ladda ormX till gr8
253 => "0000101000100001",
254 => B"010011_1000_00_0000", -- "LSL #6, Gr8 " ;  Multiplicera med 64
255 => "0000000000000110", -- 6
256 => B"000001_1000_11_1001", -- "ADD $A10, Gr8, Gr9 " ;  Adda med Head pos
257 => "0000101000010000",
258 => B"010110_0000_11_1000", -- "STORE $E00, Gr0, Gr8" ;  Store Head Pos
259 => "0000111000000000",
260 => B"010111_0000_11_1001", -- "LOAD $A5C, Gr0, Gr9 " ;  Ladda Start Tail pos
261 => "0000101001011100",
262 => B"000010_1000_11_1001", -- "SUB $A10, Gr8, Gr9 " ;  Ta bort Head pos
263 => "0000101000010000",
264 => B"000001_1000_11_1001", -- "ADD $A14, Gr8, Gr9 " ;  Adda med Tail pos
265 => "0000101000010100",
266 => B"010110_0000_11_1000", -- "STORE $E00, Gr0, Gr8" ;  Store Tail Pos
267 => "0000111000000000",
268 => B"000001_1001_00_0000", -- "ADD #1, Gr9" ; 
269 => "0000000000000001", -- 1
270 => B"000100_1001_01_0000", -- "CMP $A32, Gr9" ;  Loop stuff
271 => "0000101000110010",
272 => B"001010_0000_00_0000", -- "BNE #INITLOOP" ;  -- 228
273 => "0000000011100100", -- 228
-- APPLEINIT -- 274
274 => B"010111_0000_01_0000", -- "LOAD $A60, Gr0" ;  Ladda in ÃÂ¤pple i mitten
275 => "0000101001100000",
276 => B"010110_0000_01_0000", -- "STORE $A20, Gr0" ; 
277 => "0000101000100000",
-- PRINTMAP -- 814
278 => B"010111_0000_00_0000", -- "LOAD #0, Gr0" ; 
279 => "0000000000000000", -- 0
280 => B"010111_0001_00_0000", -- "LOAD #0, Gr1" ; 
281 => "0000000000000000", -- 0
-- PRINTMAPLOOPX -- 814
282 => B"010110_0000_01_0000", -- "STORE $F00, Gr0" ;  kopiera X och Y till in-register till TOGMEM -- 736
283 => "0000111100000000",
284 => B"010110_0001_01_0000", -- "STORE $F01, Gr1" ; 
285 => "0000111100000001",
286 => B"010111_1100_01_0000", -- "LOAD $F00, Gr12" ; 
287 => "0000111100000000",
288 => B"010111_1101_01_0000", -- "LOAD $F01, Gr13" ; 
289 => "0000111100000001",
290 => B"010111_1110_00_0000", -- "LOAD #PRINTMAPRETURN, Gr14" ;  return-adress -- 814
291 => "0000000100100110", -- 294
292 => B"001001_0000_00_0000", -- "BRA #TOGMEM" ;  -- 736
293 => "0000001011100000", -- 736
-- PRINTMAPRETURN -- 814
294 => B"010111_1110_00_0000", -- "LOAD #PRINTMAPRETURN2, Gr14" ;  -- 814
295 => "0000000100101010", -- 298
296 => B"001001_0000_00_0000", -- "BRA #GETOBSTACLEBYGMEM" ;  -- 764
297 => "0000001011111100", -- 764
-- PRINTMAPRETURN2 -- 814
298 => B"011000_1011_00_0000", -- "GSTORE Gr11" ;  F ÃÂ¤r tile-vÃÂ¤rdet fÃÂ¶r hinder
299 => "0000000000000000", -- 0
300 => B"000001_0000_00_0000", -- "ADD #1, Gr0" ;  ÃÂ¶ka X
301 => "0000000000000001", -- 1
302 => B"000100_0000_00_0000", -- "CMP #32, Gr0" ; 
303 => "0000000000100000", -- 32
304 => B"001010_0000_00_0000", -- "BNE #PRINTMAPLOOPX" ;  om vi inte ÃÂ¤r fÃÂ¤rdiga med raden -- 814
305 => "0000000100011010", -- 282
-- PRINTMAPLOOPY -- 814
306 => B"010111_0000_00_0000", -- "LOAD #0, Gr0" ; 
307 => "0000000000000000", -- 0
308 => B"000001_0001_00_0000", -- "ADD #1, Gr1" ; 
309 => "0000000000000001", -- 1
310 => B"000100_0001_00_0000", -- "CMP #32, Gr1" ; 
311 => "0000000000100000", -- 32
312 => B"001010_0000_00_0000", -- "BNE #PRINTMAPLOOPX" ;  om vi inte ÃÂ¤r fÃÂ¤rdiga, fortsÃÂ¤tt loopa -- 814
313 => "0000000100011010", -- 282
-- GAMELOOP -- 226
-- SETDIRS -- 314
314 => B"010111_1001_00_0000", -- "LOAD #0, Gr9 " ; 
315 => "0000000000000000", -- 0
-- SETDIRSLOOP -- 314
316 => B"010110_1001_01_0000", -- "STORE $A21, Gr9 " ; 
317 => "0000101000100001",
318 => B"010111_1000_01_0000", -- "LOAD $A21, Gr8 " ; 
319 => "0000101000100001",
320 => B"010011_1000_00_0000", -- "LSL #2, Gr8 " ; 
321 => "0000000000000010", -- 2
322 => B"010110_1000_01_0000", -- "STORE $F00, Gr8 " ; 
323 => "0000111100000000",
324 => B"011001_0101_00_0000", -- "SPI Gr5 " ; 
325 => "0000000000000000", -- 0
326 => B"010010_0101_01_0000", -- "LSR $F00, Gr5 " ; 
327 => "0000111100000000",
328 => B"000101_0101_00_0000", -- "AND #$000F, Gr5 " ; 
329 => "0000000000001111", -- 15
330 => B"000100_0101_00_0000", -- "CMP #0, Gr5 " ; 
331 => "0000000000000000", -- 0
332 => B"001011_0000_00_0000", -- "BEQ #SETDIRNEXT " ;  -- 348
333 => "0000000101011100", -- 348
334 => B"010110_0101_01_0000", -- "STORE $F00, Gr5 " ; 
335 => "0000111100000000",
336 => B"010111_0100_01_0000", -- "LOAD $F00, Gr4 " ; 
337 => "0000111100000000",
338 => B"000001_0100_11_1001", -- "ADD $A04, Gr4, Gr9 " ; 
339 => "0000101000000100",
340 => B"000101_0100_00_0000", -- "AND #1, Gr4 " ; 
341 => "0000000000000001", -- 1
342 => B"000100_0100_00_0000", -- "CMP #0, Gr4 " ; 
343 => "0000000000000000", -- 0
344 => B"001011_0000_00_0000", -- "BEQ #SETDIRNEXT " ;  -- 348
345 => "0000000101011100", -- 348
346 => B"010110_0101_11_1001", -- "STORE $A04, Gr5, Gr9" ; 
347 => "0000101000000100",
-- SETDIRNEXT -- 348
348 => B"000001_1001_00_0000", -- "ADD #1, Gr9 " ; 
349 => "0000000000000001", -- 1
350 => B"000100_1001_01_0000", -- "CMP $A32, Gr9 " ; 
351 => "0000101000110010",
352 => B"001010_0000_00_0000", -- "BNE #SETDIRSLOOP " ;  -- 314
353 => "0000000100111100", -- 316
-- MOVESNAKES -- 354
354 => B"010111_1001_00_0000", -- "LOAD #0, Gr9" ; 
355 => "0000000000000000", -- 0
-- MOVESNAKESLOOP -- 354
356 => B"010110_1001_01_0000", -- "STORE $A21, Gr9" ;  Snake i
357 => "0000101000100001",
358 => B"010111_1000_01_0000", -- "LOAD $A21, Gr8 " ; 
359 => "0000101000100001",
360 => B"010011_1000_00_0000", -- "LSL #6, Gr8 " ; 
361 => "0000000000000110", -- 6
362 => B"000001_1000_11_1001", -- "ADD $A10, Gr8, Gr9 " ; 
363 => "0000101000010000",
364 => B"010111_1111_11_1000", -- "LOAD $E00, Gr15, Gr8 " ; 
365 => "0000111000000000",
366 => B"000010_1000_11_1001", -- "SUB $A10, Gr8, Gr9 " ; 
367 => "0000101000010000",
368 => B"010111_1110_00_0000", -- "LOAD #MOVESNAKEDIRRETURN1, Gr14" ;  -- 372
369 => "0000000101110100", -- 372
370 => B"001001_0000_00_0000", -- "BRA #FROMGMEM " ;  -- 750
371 => "0000001011101110", -- 750
-- MOVESNAKEDIRRETURN1 -- 372
372 => B"010111_0101_11_1001", -- "LOAD $A04, Gr5, Gr9" ;  Ladda riktning
373 => "0000101000000100",
374 => B"000100_0101_00_0000", -- "CMP #1, Gr5" ; 
375 => "0000000000000001", -- 1
376 => B"001011_0000_00_0000", -- "BEQ #MOVESNAKEUP" ;  -- 406
377 => "0000000110000110", -- 390
378 => B"000100_0101_00_0000", -- "CMP #2, Gr5" ; 
379 => "0000000000000010", -- 2
380 => B"001011_0000_00_0000", -- "BEQ #MOVESNAKERIGHT" ;  -- 406
381 => "0000000110001010", -- 394
382 => B"000100_0101_00_0000", -- "CMP #3, Gr5" ; 
383 => "0000000000000011", -- 3
384 => B"001011_0000_00_0000", -- "BEQ #MOVESNAKEDOWN" ;  -- 398
385 => "0000000110001110", -- 398
386 => B"000100_0101_00_0000", -- "CMP #4, Gr5" ; 
387 => "0000000000000100", -- 4
388 => B"001011_0000_00_0000", -- "BEQ #MOVESNAKELEFT" ;  -- 406
389 => "0000000110010010", -- 402
-- MOVESNAKEUP -- 406
390 => B"000010_1101_00_0000", -- "SUB #1, Gr13 " ; 
391 => "0000000000000001", -- 1
392 => B"001001_0000_00_0000", -- "BRA #MOVESNAKE " ;  -- 406
393 => "0000000110010110", -- 406
-- MOVESNAKERIGHT -- 406
394 => B"000001_1100_00_0000", -- "ADD #1, Gr12 " ; 
395 => "0000000000000001", -- 1
396 => B"001001_0000_00_0000", -- "BRA #MOVESNAKE " ;  -- 406
397 => "0000000110010110", -- 406
-- MOVESNAKEDOWN -- 398
398 => B"000001_1101_00_0000", -- "ADD #1, Gr13 " ; 
399 => "0000000000000001", -- 1
400 => B"001001_0000_00_0000", -- "BRA #MOVESNAKE " ;  -- 406
401 => "0000000110010110", -- 406
-- MOVESNAKELEFT -- 406
402 => B"000010_1100_00_0000", -- "SUB #1, Gr12 " ; 
403 => "0000000000000001", -- 1
404 => B"001001_0000_00_0000", -- "BRA #MOVESNAKE " ;  -- 406
405 => "0000000110010110", -- 406
-- MOVESNAKE -- 406
406 => B"000101_1100_00_0000", -- "AND #$001F, Gr12 " ; 
407 => "0000000000011111", -- 31
408 => B"000101_1101_00_0000", -- "AND #$001F, Gr13 " ; 
409 => "0000000000011111", -- 31
410 => B"010111_1110_00_0000", -- "LOAD #MOVESNAKERETURN1, Gr14 " ;  -- 414
411 => "0000000110011110", -- 414
412 => B"001001_0000_00_0000", -- "BRA #TOGMEM " ;  -- 736
413 => "0000001011100000", -- 736
-- MOVESNAKERETURN1 -- 414
414 => B"010111_0111_11_1001", -- "LOAD $A10, Gr7, Gr9 " ; 
415 => "0000101000010000",
416 => B"000001_0111_00_0000", -- "ADD #1, Gr7 " ; 
417 => "0000000000000001", -- 1
418 => B"000101_0111_00_0000", -- "AND #$003F, Gr7 " ; 
419 => "0000000000111111", -- 63
420 => B"010110_0111_11_1001", -- "STORE $A10, Gr7, Gr9 " ; 
421 => "0000101000010000",
422 => B"000001_1000_11_1001", -- "ADD $A10, Gr8, Gr9 " ; 
423 => "0000101000010000",
424 => B"010110_1111_11_1000", -- "STORE $E00, Gr15, Gr8 " ; 
425 => "0000111000000000",
426 => B"000010_1000_11_1001", -- "SUB $A10, Gr8, Gr9 " ; 
427 => "0000101000010000",
428 => B"000001_1000_11_1001", -- "ADD $A14, Gr8, Gr9 " ; 
429 => "0000101000010100",
430 => B"010111_1111_11_1000", -- "LOAD $E00, Gr15, Gr8 " ; 
431 => "0000111000000000",
432 => B"010111_0001_00_0000", -- "LOAD #0, Gr1" ; 
433 => "0000000000000000", -- 0
434 => B"011000_0001_00_0000", -- "GSTORE Gr1 " ; 
435 => "0000000000000000", -- 0
436 => B"010111_0111_11_1001", -- "LOAD $A14, Gr7, Gr9 " ; 
437 => "0000101000010100",
438 => B"000001_0111_00_0000", -- "ADD #1, Gr7 " ; 
439 => "0000000000000001", -- 1
440 => B"000101_0111_00_0000", -- "AND #$003F, Gr7 " ; 
441 => "0000000000111111", -- 63
442 => B"010110_0111_11_1001", -- "STORE $A14, Gr7, Gr9 " ; 
443 => "0000101000010100",
444 => B"000001_1001_00_0000", -- "ADD #1, Gr9 " ; 
445 => "0000000000000001", -- 1
446 => B"000100_1001_01_0000", -- "CMP $A32, Gr9 " ; 
447 => "0000101000110010",
448 => B"001010_0000_00_0000", -- "BNE #MOVESNAKESLOOP " ;  -- 354
449 => "0000000101100100", -- 356
-- CHECKSNAKES -- 450
450 => B"010111_1001_00_0000", -- "LOAD #0, Gr9 " ; 
451 => "0000000000000000", -- 0
-- CHECKSNAKESLOOP1 -- 452
452 => B"010110_1001_01_0000", -- "STORE $A21, Gr9 " ; 
453 => "0000101000100001",
454 => B"010111_1000_01_0000", -- "LOAD $A21, Gr8 " ; 
455 => "0000101000100001",
456 => B"010011_1000_00_0000", -- "LSL #6, Gr8 " ; 
457 => "0000000000000110", -- 6
458 => B"000001_1000_11_1001", -- "ADD $A10, Gr8, Gr9 " ; 
459 => "0000101000010000",
460 => B"010111_0111_11_1000", -- "LOAD $E00, Gr7, Gr8 " ; 
461 => "0000111000000000",
462 => B"010111_0110_00_0000", -- "LOAD #0, Gr6 " ; 		Gr9 = Yttre OrmX, Gr8 = arbete fÃÂ¶r yttre OrmX, Gr7 = Yttre orm huvud pos
463 => "0000000000000000", -- 0
-- CHECKSNAKESLOOP2 -- 464
464 => B"010110_0110_01_0000", -- "STORE $F00, Gr6 " ; 
465 => "0000111100000000",
466 => B"010111_0101_01_0000", -- "LOAD $F00, Gr5 " ; 
467 => "0000111100000000",
468 => B"010011_0101_00_0000", -- "LSL #6, Gr5 " ; 
469 => "0000000000000110", -- 6
470 => B"010111_0100_11_0110", -- "LOAD $A14, Gr4, Gr6 " ; 
471 => "0000101000010100",
-- CHECKSNAKESSEGMENTS -- 472
472 => B"010110_0100_01_0000", -- "STORE $F01, Gr4 " ; 
473 => "0000111100000001",
474 => B"000001_0101_01_0000", -- "ADD $F01, Gr5" ; 
475 => "0000111100000001",
476 => B"010111_0011_11_0101", -- "LOAD $E00, Gr3, Gr5" ; 
477 => "0000111000000000",
478 => B"000010_0101_01_0000", -- "SUB $F01, Gr5 " ; 
479 => "0000111100000001",
480 => B"010110_0011_01_0000", -- "STORE $F02, Gr3 " ; 
481 => "0000111100000010",
482 => B"000100_0111_01_0000", -- "CMP $F02, Gr7 " ; 
483 => "0000111100000010",
484 => B"001011_0000_00_0000", -- "BEQ #INFINITE " ; 		Gr3 = Seg pos -- 694
485 => "0000001010110110", -- 694
486 => B"000001_0100_00_0000", -- "ADD #1, Gr4 " ; 
487 => "0000000000000001", -- 1
488 => B"000101_0100_00_0000", -- "AND #$003F, Gr4 " ; 
489 => "0000000000111111", -- 63
490 => B"000100_0100_11_0110", -- "CMP $A10, Gr4, Gr6 " ; 
491 => "0000101000010000",
492 => B"001010_0000_00_0000", -- "BNE #CHECKSNAKESSEGMENTS " ;  -- 472
493 => "0000000111011000", -- 472
494 => B"000001_0110_00_0000", -- "ADD #1, Gr6 " ; 
495 => "0000000000000001", -- 1
496 => B"000100_0110_01_0000", -- "CMP $A32, Gr6 " ; 
497 => "0000101000110010",
498 => B"001010_0000_00_0000", -- "BNE #CHECKSNAKESLOOP2 " ;  -- 464
499 => "0000000111010000", -- 464
500 => B"000001_1001_00_0000", -- "ADD #1, Gr9 " ; 
501 => "0000000000000001", -- 1
502 => B"000100_1001_01_0000", -- "CMP $A32, Gr9 " ; 
503 => "0000101000110010",
504 => B"001010_0000_00_0000", -- "BNE #CHECKSNAKESLOOP1 " ;  -- 452
505 => "0000000111000100", -- 452
-- CHECKWALLS -- 506
506 => B"010111_1001_00_0000", -- "LOAD #0, Gr9 " ; 
507 => "0000000000000000", -- 0
-- CHECKWALLSLOOP -- 508
508 => B"010110_1001_01_0000", -- "STORE $A21, Gr9 " ; 
509 => "0000101000100001",
510 => B"010111_1000_01_0000", -- "LOAD $A21, Gr8 " ; 
511 => "0000101000100001",
512 => B"010011_1000_00_0000", -- "LSL #6, Gr8 " ; 
513 => "0000000000000110", -- 6
514 => B"000001_1000_11_1001", -- "ADD $A10, Gr8, Gr9 " ; 
515 => "0000101000010000",
516 => B"010111_1111_11_1000", -- "LOAD $E00, Gr15, Gr8 " ; 
517 => "0000111000000000",
518 => B"010111_1110_00_0000", -- "LOAD #CHECKWALLSRETURN, Gr14 " ;  -- 506
519 => "0000001000001010", -- 522
520 => B"001001_0000_00_0000", -- "BRA #GETOBSTACLEBYGMEM " ;  -- 764
521 => "0000001011111100", -- 764
-- CHECKWALLSRETURN -- 506
522 => B"000100_1011_00_0000", -- "CMP #$FFFF, Gr11 " ; 
523 => "1111111111111111",
524 => B"001011_0000_00_0000", -- "BEQ #INFINITE " ;  -- 694
525 => "0000001010110110", -- 694
526 => B"000001_1001_00_0000", -- "ADD #1, Gr9 " ; 
527 => "0000000000000001", -- 1
528 => B"000100_1001_01_0000", -- "CMP $A32, Gr9 " ; 
529 => "0000101000110010",
530 => B"001010_0000_00_0000", -- "BNE #CHECKWALLSLOOP " ;  -- 508
531 => "0000000111111100", -- 508
-- CHECKAPPLE -- 532
532 => B"010111_1001_00_0000", -- "LOAD #0, Gr9 " ; 
533 => "0000000000000000", -- 0
534 => B"010111_0101_01_0000", -- "LOAD $A20, Gr5 " ; 
535 => "0000101000100000",
-- CHECKAPPLELOOP -- 532
536 => B"010110_1001_01_0000", -- "STORE $A21, Gr9 " ; 
537 => "0000101000100001",
538 => B"010111_1000_01_0000", -- "LOAD $A21, Gr8 " ; 
539 => "0000101000100001",
540 => B"010011_1000_00_0000", -- "LSL #6, Gr8 " ; 
541 => "0000000000000110", -- 6
542 => B"000001_1000_11_1001", -- "ADD $A10, Gr8, Gr9 " ; 
543 => "0000101000010000",
544 => B"000100_0101_11_1000", -- "CMP $E00, Gr5, Gr8 " ; 
545 => "0000111000000000",
546 => B"001011_0000_00_0000", -- "BEQ #TAKEAPPLE" ;  -- 556
547 => "0000001000101100", -- 556
548 => B"000001_1001_00_0000", -- "ADD #1, Gr9 " ; 
549 => "0000000000000001", -- 1
550 => B"000100_1001_01_0000", -- "CMP $A32, Gr9 " ; 
551 => "0000101000110010",
552 => B"001010_0000_00_0000", -- "BNE #CHECKAPPLELOOP " ;  -- 532
553 => "0000001000011000", -- 536
554 => B"001001_0000_00_0000", -- "BRA #PRINTAPPLE " ;  -- 814
555 => "0000001001111000", -- 632
-- TAKEAPPLE -- 556
556 => B"010111_0100_11_1001", -- "LOAD $A1C, Gr4, Gr9 " ; 
557 => "0000101000011100",
558 => B"000001_0100_00_0000", -- "ADD #1, Gr4 " ; 
559 => "0000000000000001", -- 1
560 => B"010110_0100_11_1001", -- "STORE $A1C, Gr4, Gr9 " ; 
561 => "0000101000011100",
562 => B"010111_0011_11_1001", -- "LOAD $A14, Gr3, Gr9 " ; 
563 => "0000101000010100",
564 => B"000010_0011_00_0000", -- "SUB #1, Gr3" ; 
565 => "0000000000000001", -- 1
566 => B"000101_0011_00_0000", -- "AND #$003F, Gr3 " ; 
567 => "0000000000111111", -- 63
568 => B"010110_0011_11_1001", -- "STORE $A14, Gr3, Gr9 " ; 
569 => "0000101000010100",
-- NEWAPPLE -- 570
570 => B"010111_1001_00_0000", -- "LOAD #0, Gr9" ; 
571 => "0000000000000000", -- 0
572 => B"011011_1100_00_0000", -- "RAND #31, Gr12 " ; 
573 => "0000000000011111", -- 31
574 => B"000101_1100_00_0000", -- "AND #31, Gr12 " ; 
575 => "0000000000011111", -- 31
576 => B"011011_1101_00_0000", -- "RAND #31, Gr13 " ; 
577 => "0000000000011111", -- 31
578 => B"000101_1101_00_0000", -- "AND #31, Gr13 " ; 
579 => "0000000000011111", -- 31
580 => B"010111_1110_00_0000", -- "LOAD #NEWAPPLELOOP, Gr14 " ;  -- 570
581 => "0000001001001000", -- 584
582 => B"001001_0000_00_0000", -- "BRA #TOGMEM " ;  -- 736
583 => "0000001011100000", -- 736
-- NEWAPPLELOOP -- 570
584 => B"010110_1001_01_0000", -- "STORE $A21, Gr9 " ; 
585 => "0000101000100001",
586 => B"010111_1000_01_0000", -- "LOAD $A21, Gr8 " ; 
587 => "0000101000100001",
588 => B"010011_1000_00_0000", -- "LSL #6, Gr8 " ; 
589 => "0000000000000110", -- 6
590 => B"010111_0111_11_1001", -- "LOAD $A14, Gr7, Gr9 " ; 
591 => "0000101000010100",
592 => B"000010_0111_00_0000", -- "SUB #1, Gr7" ; 
593 => "0000000000000001", -- 1
-- NEWAPPLESEGMENT -- 594
594 => B"000001_0111_00_0000", -- "ADD #1, Gr7 " ; 
595 => "0000000000000001", -- 1
596 => B"000101_0111_00_0000", -- "AND #$003F, Gr7 " ; 
597 => "0000000000111111", -- 63
598 => B"010110_0111_01_0000", -- "STORE $F00, Gr7 " ; 
599 => "0000111100000000",
600 => B"000001_1000_01_0000", -- "ADD $F00, Gr8" ; 
601 => "0000111100000000",
602 => B"010111_0000_11_1000", -- "LOAD $E00, Gr0, Gr8" ; 
603 => "0000111000000000",
604 => B"000010_1000_01_0000", -- "SUB $F00, Gr8 " ; 
605 => "0000111100000000",
606 => B"010110_0000_01_0000", -- "STORE $F00, Gr0" ; 
607 => "0000111100000000",
608 => B"000100_1111_01_0000", -- "CMP $F00, Gr15 " ; 
609 => "0000111100000000",
610 => B"001011_0000_00_0000", -- "BEQ #NEWAPPLE" ;  -- 570
611 => "0000001000111010", -- 570
612 => B"000100_0111_11_1001", -- "CMP $A10, Gr7, Gr9 " ; 
613 => "0000101000010000",
614 => B"001010_0000_00_0000", -- "BNE #NEWAPPLESEGMENT " ;  -- 594
615 => "0000001001010010", -- 594
616 => B"000001_1001_00_0000", -- "ADD #1, Gr9" ; 
617 => "0000000000000001", -- 1
618 => B"000100_1001_01_0000", -- "CMP $A32, Gr9" ; 
619 => "0000101000110010",
620 => B"001010_0000_00_0000", -- "BNE #NEWAPPLELOOP " ;  -- 570
621 => "0000001001001000", -- 584
622 => B"010111_1110_00_0000", -- "LOAD #NEWAPPLERETURN, Gr14 " ;  -- 570
623 => "0000001001110010", -- 626
624 => B"001001_0000_00_0000", -- "BRA #GETOBSTACLEBYGMEM " ;  -- 764
625 => "0000001011111100", -- 764
-- NEWAPPLERETURN -- 570
626 => B"000100_1011_00_0000", -- "CMP #$FFFF, Gr11 " ; 
627 => "1111111111111111",
628 => B"001011_0000_00_0000", -- "BEQ #NEWAPPLE " ;  -- 570
629 => "0000001000111010", -- 570
630 => B"010110_1111_01_0000", -- "STORE $A20, Gr15 " ; 
631 => "0000101000100000",
-- PRINTAPPLE -- 814
632 => B"010111_1111_01_0000", -- "LOAD $A20, Gr15 " ; 
633 => "0000101000100000",
634 => B"010111_1110_00_0000", -- "LOAD #$E000, Gr14 " ; 
635 => "1110000000000000",
636 => B"011000_1110_00_0000", -- "GSTORE Gr14 " ; 
637 => "0000000000000000", -- 0
-- PRINTSNAKES -- 814
638 => B"010111_1001_00_0000", -- "LOAD #0, Gr9" ; 
639 => "0000000000000000", -- 0
-- PRINTSNAKESLOOP -- 814
640 => B"010110_1001_01_0000", -- "STORE $A21, Gr9" ;  SNAKE i
641 => "0000101000100001",
642 => B"010111_0101_11_1001", -- "LOAD $A00, Gr5, Gr9 " ;  Ladda ormfÃÂ¤rg till Gr5
643 => "0000101000000000",
644 => B"010111_1000_01_0000", -- "LOAD $A21, Gr8 " ;  FÃÂ¶rbered arr index
645 => "0000101000100001",
646 => B"010011_1000_00_0000", -- "LSL #6, Gr8" ;  Arr start index fÃÂ¶rberett
647 => "0000000000000110", -- 6
648 => B"010111_0111_11_1001", -- "LOAD $A14, Gr7, Gr9 " ;  Adda Tail Pointer
649 => "0000101000010100",
650 => B"000010_0111_00_0000", -- "SUB #1, Gr7 " ;  tail pointer - 1;
651 => "0000000000000001", -- 1
-- PRINTSNAKESEGMENT -- 814
652 => B"000001_0111_00_0000", -- "ADD #1, Gr7" ;  Adda 1 till pointern
653 => "0000000000000001", -- 1
654 => B"000101_0111_00_0000", -- "AND #$003F, Gr7 " ;  Modulo 64;
655 => "0000000000111111", -- 63
656 => B"010110_0111_01_0000", -- "STORE $F00, Gr7" ; 
657 => "0000111100000000",
658 => B"000001_1000_01_0000", -- "ADD $F00, Gr8" ; 
659 => "0000111100000000",
660 => B"010111_1111_11_1000", -- "LOAD $E00, Gr15, Gr8 " ;  Ladda Gr15 med rÃÂ¤tt pos
661 => "0000111000000000",
662 => B"011000_0101_00_0000", -- "GSTORE Gr5 " ;  Skriv till GMEM
663 => "0000000000000000", -- 0
664 => B"000010_1000_01_0000", -- "SUB $F00, Gr8" ; 
665 => "0000111100000000",
666 => B"000100_0111_11_1001", -- "CMP $A10, Gr7, Gr9 " ;  CMP pointer med head
667 => "0000101000010000",
668 => B"001010_0000_00_0000", -- "BNE #PRINTSNAKESEGMENT " ;  -- 814
669 => "0000001010001100", -- 652
670 => B"000001_1001_00_0000", -- "ADD #1, Gr9 " ; 
671 => "0000000000000001", -- 1
672 => B"000100_1001_01_0000", -- "CMP $A32, Gr9 " ; 
673 => "0000101000110010",
674 => B"001010_0000_00_0000", -- "BNE #PRINTSNAKESLOOP " ;  -- 814
675 => "0000001010000000", -- 640
676 => B"010111_0000_00_0000", -- "LOAD #0, Gr0" ;  usec counter
677 => "0000000000000000", -- 0
678 => B"010111_0001_00_0000", -- "LOAD #0, Gr1" ;  msec counter
679 => "0000000000000000", -- 0
-- GAMEWAITLOOPU -- 226
680 => B"000001_0000_00_0000", -- "ADD #1, Gr0" ; 
681 => "0000000000000001", -- 1
682 => B"000100_0000_00_0000", -- "CMP #$FFFF, Gr0" ; 
683 => "1111111111111111",
684 => B"001010_0000_00_0000", -- "BNE #GAMEWAITLOOPU" ;  om vi inte har loopat en ms ÃÂ¤n -- 226
685 => "0000001010101000", -- 680
686 => B"000001_0001_00_0000", -- "ADD #1, Gr1" ; 
687 => "0000000000000001", -- 1
688 => B"000100_0001_01_0000", -- "CMP $A31, Gr1" ;  se om vi har vÃÂ¤ntat antal ms som stÃÂ¥r i spelhastighet
689 => "0000101000110001",
690 => B"001010_0000_00_0000", -- "BNE #GAMEWAITLOOPU" ;  om vi inte gjort det, forstÃÂ¤tt loopa -- 226
691 => "0000001010101000", -- 680
692 => B"001001_0000_00_0000", -- "BRA #GAMELOOP" ;  -- 226
693 => "0000000100111010", -- 314
-- INFINITE -- 694
694 => B"010111_1110_00_0000", -- "LOAD #INFINITE2, Gr14 " ;  -- 694
695 => "0000001010111100", -- 700
696 => B"010111_1111_00_0000", -- "LOAD #$0000, Gr15 " ; 
697 => "0000000000000000", -- 0
698 => B"001001_0000_00_0000", -- "BRA #CLEARSCREEN " ;  -- 908
699 => "0000001110001100", -- 908
-- INFINITE2 -- 694
700 => B"010111_1001_00_0000", -- "LOAD #$000F, Gr9" ; 
701 => "0000000000001111", -- 15
702 => B"010111_1010_00_0000", -- "LOAD #28, Gr10 " ; 
703 => "0000000000011100", -- 28
704 => B"010111_1011_00_0000", -- "LOAD #23, Gr11 " ; 
705 => "0000000000010111", -- 23
706 => B"010111_1100_00_0000", -- "LOAD #4, Gr12 " ; 
707 => "0000000000000100", -- 4
708 => B"010111_1101_00_0000", -- "LOAD #10, Gr13 " ; 
709 => "0000000000001010", -- 10
710 => B"010111_1111_00_0000", -- "LOAD #$D34, Gr15 " ; 
711 => "0000110100110100",
712 => B"010111_1110_00_0000", -- "LOAD #INFINITE3, Gr14 " ;  -- 694
713 => "0000001011001100", -- 716
714 => B"001001_0000_00_0000", -- "BRA #PRINT " ;  -- 814
715 => "0000001100101110", -- 814
-- INFINITE3 -- 694
716 => B"010111_0000_00_0000", -- "LOAD #0, Gr0 " ; 
717 => "0000000000000000", -- 0
718 => B"000001_0000_01_0000", -- "ADD $A1C, Gr0 " ; 
719 => "0000101000011100",
720 => B"000001_0000_01_0000", -- "ADD $A1D, Gr0 " ; 
721 => "0000101000011101",
722 => B"000001_0000_01_0000", -- "ADD $A1E, Gr0 " ; 
723 => "0000101000011110",
724 => B"000001_0000_01_0000", -- "ADD $A1F, Gr0 " ; 
725 => "0000101000011111",
-- INFINITE4 -- 694
726 => B"011001_0001_00_0000", -- "SPI Gr1" ; 
727 => "0000000000000000", -- 0
728 => B"000101_0001_00_0000", -- "AND #$0008, Gr1" ; 
729 => "0000000000001000", -- 8
730 => B"000100_0001_00_0000", -- "CMP #$0008, Gr1" ; 
731 => "0000000000001000", -- 8
732 => B"001011_0000_00_0000", -- "BEQ #MENU" ;  gaaaah oÃÂ¤ÃÂ¤ÃÂ¤ÃÂ¤ÃÂ¤ÃÂ¤ÃÂ¤ndlig -- 2
733 => "0000000000000010", -- 2
734 => B"001001_0000_00_0000", -- "BRA #INFINITE4 " ;  -- 694
735 => "0000001011010110", -- 726
-- TOGMEM -- 736
736 => B"010110_1100_01_0000", -- "STORE $F00, Gr12" ;  spara undan X, och Y
737 => "0000111100000000",
738 => B"010110_1101_01_0000", -- "STORE $F01, Gr13" ; 
739 => "0000111100000001",
740 => B"010111_1111_01_0000", -- "LOAD $F01, Gr15" ;  ladda in Y till Gr15.
741 => "0000111100000001",
742 => B"010011_1111_00_0000", -- "LSL #5, Gr15" ;  shifta ut Y-bitarna till sin rÃÂ¤tta plats
743 => "0000000000000101", -- 5
744 => B"000110_1111_01_0000", -- "OR $F00, Gr15" ;  ORa in X-delen
745 => "0000111100000000",
746 => B"010110_1110_01_0000", -- "STORE $F10, Gr14 " ; lÃÂ¤gg returnadressen pÃÂ¥ ett stÃÂ¤lle i minnet
747 => "0000111100010000",
748 => B"001001_0000_01_0000", -- "BRA $F10" ;  returnera
749 => "0000111100010000",
-- FROMGMEM -- 750
750 => B"010110_1111_01_0000", -- "STORE $F00, Gr15" ;  spara undan in-vÃÂ¤rdet
751 => "0000111100000000",
752 => B"010111_1100_01_0000", -- "LOAD $F00, Gr12" ;  ladda till X
753 => "0000111100000000",
754 => B"000101_1100_00_0000", -- "AND #$001F, Gr12" ;  ANDa bort y-delen frÃÂ¥n x
755 => "0000000000011111", -- 31
756 => B"010111_1101_01_0000", -- "LOAD $F00, Gr13" ; 
757 => "0000111100000000",
758 => B"010010_1101_00_0000", -- "LSR #5, Gr13" ;  Shifta bort y-delen till LSBs
759 => "0000000000000101", -- 5
760 => B"010110_1110_01_0000", -- "STORE $F10, Gr14 " ; lÃÂ¤gg returnadressen pÃÂ¥ ett stÃÂ¤lle i minnet
761 => "0000111100010000",
762 => B"001001_0000_01_0000", -- "BRA $F10" ; 
763 => "0000111100010000",
-- GETOBSTACLEBYGMEM -- 764
764 => B"010110_1111_01_0000", -- "STORE $F00, Gr15" ;  spara GMEM-posen pÃÂ¥ F00
765 => "0000111100000000",
766 => B"010110_1111_01_0000", -- "STORE $F01, Gr15" ;  spara GMEM-posen pÃÂ¥ F01
767 => "0000111100000001",
768 => B"010111_1100_01_0000", -- "LOAD $F00, Gr12" ;  ladda ovanstÃÂ¥ende
769 => "0000111100000000",
770 => B"000101_1100_00_0000", -- "AND #$001F, Gr12" ;  ta bort Y-bitarna
771 => "0000000000011111", -- 31
772 => B"010010_1111_00_0000", -- "LSR #5, Gr15" ;  shifta bort Y-bitarna till LSBs
773 => "0000000000000101", -- 5
774 => B"010011_1111_00_0000", -- "LSL #5, Gr15" ; 
775 => "0000000000000101", -- 5
776 => B"010110_1111_01_0000", -- "STORE $F00, Gr15" ;  addera de bÃÂ¥da och sÃÂ¤tt resultat i Gr12
777 => "0000111100000000",
778 => B"000001_1100_01_0000", -- "ADD $F00, Gr12" ; 
779 => "0000111100000000",
780 => B"010110_1100_01_0000", -- "STORE $F00, Gr12" ;  kopiera datat till Gr15
781 => "0000111100000000",
782 => B"010111_1111_01_0000", -- "LOAD $F00, Gr15" ; 
783 => "0000111100000000",
784 => B"010010_1111_00_0000", -- "LSR #4, Gr15" ; 
785 => "0000000000000100", -- 4
786 => B"000101_1100_00_0000", -- "AND #$000F, Gr12" ; 
787 => "0000000000001111", -- 15
788 => B"010110_1010_01_0000", -- "STORE $F02, Gr10" ; 
789 => "0000111100000010",
790 => B"010111_1010_11_1111", -- "LOAD $DB0, Gr10, Gr15" ;  ladda rÃÂ¤tt word i kartan till Gr10
791 => "0000110110110000",
792 => B"010110_1100_01_0000", -- "STORE $F00, Gr12" ; 
793 => "0000111100000000",
794 => B"010011_1010_01_0000", -- "LSL $F00, Gr10" ;  Shifta wordet till vÃÂ¤nster Gr12 antal gÃÂ¥nger
795 => "0000111100000000",
796 => B"000101_1010_00_0000", -- "AND #$8000, Gr10" ;  anda bort all annan data
797 => "1000000000000000",
798 => B"010111_1011_00_0000", -- "LOAD #$0000, Gr11" ; ladda ett standardvÃÂ¤rde till Gr11
799 => "0000000000000000", -- 0
800 => B"000100_1010_00_0000", -- "CMP #$8000, Gr10" ;  kolla om det ÃÂ¤r en etta vi shiftat in
801 => "1000000000000000",
802 => B"001010_0000_00_0000", -- "BNE #WASNOTOBSTACLE" ;  om sÃÂ¥ inte var fallet -- 806
803 => "0000001100100110", -- 806
804 => B"010111_1011_00_0000", -- "LOAD #$FFFF, Gr11" ;  annars (var hinder dÃÂ¤r)
805 => "1111111111111111",
-- WASNOTOBSTACLE -- 806
806 => B"010110_1110_01_0000", -- "STORE $F10, Gr14 " ; lÃÂ¤gg returnadressen pÃÂ¥ ett stÃÂ¤lle i minnet
807 => "0000111100010000",
808 => B"010111_1010_01_0000", -- "LOAD $F02, Gr10" ; 
809 => "0000111100000010",
810 => B"010111_1111_01_0000", -- "LOAD $F01, Gr15" ; 
811 => "0000111100000001",
812 => B"001001_0000_01_0000", -- "BRA $F10" ;  return
813 => "0000111100010000",
-- PRINT -- 814
814 => B"010110_1010_01_0000", -- "STORE $F23, Gr10 " ; 
815 => "0000111100100011",
816 => B"010110_1011_01_0000", -- "STORE $F24, Gr11 " ; 
817 => "0000111100100100",
818 => B"010110_1100_01_0000", -- "STORE $F25, Gr12 " ; 
819 => "0000111100100101",
820 => B"010110_1101_01_0000", -- "STORE $F26, Gr13 " ; 
821 => "0000111100100110",
822 => B"010110_1110_01_0000", -- "STORE $F21, Gr14 " ; 
823 => "0000111100100001",
824 => B"010110_1111_01_0000", -- "STORE $F22, Gr15 " ; 
825 => "0000111100100010",
826 => B"010011_1001_00_0000", -- "LSL #12, Gr9" ; 
827 => "0000000000001100", -- 12
828 => B"010110_1001_01_0000", -- "STORE $F27, Gr9" ; 
829 => "0000111100100111",
830 => B"010111_1000_01_0000", -- "LOAD $F23, Gr8 " ; 
831 => "0000111100100011",
832 => B"000010_1000_01_0000", -- "SUB $F25, Gr8 " ; 
833 => "0000111100100101",
834 => B"010010_1000_00_0000", -- "LSR #2, Gr8 " ; 
835 => "0000000000000010", -- 2
836 => B"010110_1000_01_0000", -- "STORE $F28, Gr8 " ; 
837 => "0000111100101000",
838 => B"010111_0111_00_0000", -- "LOAD #0, Gr7" ; 
839 => "0000000000000000", -- 0
-- PRINTLOOPX -- 814
840 => B"010111_1110_00_0000", -- "LOAD #PRINTLOOPXRETURN, Gr14" ;  -- 814
841 => "0000001101001100", -- 844
842 => B"001001_0000_00_0000", -- "BRA #TOGMEM" ;  -- 736
843 => "0000001011100000", -- 736
-- PRINTLOOPXRETURN -- 814
844 => B"010110_0111_01_0000", -- "STORE $F20, Gr7 " ; 
845 => "0000111100100000",
846 => B"010111_0010_01_0000", -- "LOAD $F20, Gr2" ; 
847 => "0000111100100000",
848 => B"010110_1100_01_0000", -- "STORE $F20, Gr12" ;  LÃÂ¤gg till x // 4 till Gr3, fÃÂ¶r att fÃÂ¥ rÃÂ¤tt word-offset i x-led
849 => "0000111100100000",
850 => B"010111_0011_01_0000", -- "LOAD $F20, Gr3" ; 
851 => "0000111100100000",
852 => B"000010_0011_01_0000", -- "SUB $F25, Gr3" ; 
853 => "0000111100100101",
854 => B"010010_0011_00_0000", -- "LSR #2, Gr3" ; 
855 => "0000000000000010", -- 2
856 => B"010110_0011_01_0000", -- "STORE $F20, Gr3" ; 
857 => "0000111100100000",
858 => B"000001_0010_01_0000", -- "ADD $F20, Gr2" ; 
859 => "0000111100100000",
860 => B"010110_1100_01_0000", -- "STORE $F20, Gr12" ;  Spara (x mod 4) - 1 till Gr3, vilket ÃÂ¤r tile-index i wordet
861 => "0000111100100000",
862 => B"010111_0011_01_0000", -- "LOAD $F20, Gr3" ; 
863 => "0000111100100000",
864 => B"000010_0011_01_0000", -- "SUB $F25, Gr3 " ; 
865 => "0000111100100101",
866 => B"000101_0011_00_0000", -- "AND #$0003, Gr3" ;  MOD #4
867 => "0000000000000011", -- 3
868 => B"010110_0010_01_0000", -- "STORE $F20, Gr2" ; 
869 => "0000111100100000",
870 => B"010111_0101_01_0000", -- "LOAD $F22, Gr5" ; 
871 => "0000111100100010",
872 => B"000001_0101_01_0000", -- "ADD $F20, Gr5" ; 
873 => "0000111100100000",
874 => B"010110_0101_01_0000", -- "STORE $F20, Gr5" ; 
875 => "0000111100100000",
876 => B"010111_0100_10_0000", -- "LOAD ($F20), Gr4" ;  Ladda in rÃÂ¤tt word frÃÂ¥n bilden till register 4
877 => "0000111100100000",
878 => B"010011_0011_00_0000", -- "LSL #2, Gr3" ; 
879 => "0000000000000010", -- 2
880 => B"010110_0011_01_0000", -- "STORE $F20, Gr3" ;  Shifta wordet sÃÂ¥ att vÃÂ¥r tile hamnar lÃÂ¤ngs till vÃÂ¤nster (MSBs, vilket ÃÂ¤r vad GMEMet tar frÃÂ¥n bussen)
881 => "0000111100100000",
882 => B"010011_0100_01_0000", -- "LSL $F20, Gr4" ; 
883 => "0000111100100000",
884 => B"000101_0100_00_0000", -- "AND #$F000, Gr4" ;  ANDa bort de bitar som lÃÂ¥g efter vÃÂ¥r tile i wordet
885 => "1111000000000000",
886 => B"000101_0100_01_0000", -- "AND $F27, Gr4 " ; 
887 => "0000111100100111",
888 => B"011000_0100_00_0000", -- "GSTORE Gr4" ; 
889 => "0000000000000000", -- 0
890 => B"000001_1100_00_0000", -- "ADD #1, Gr12" ; 
891 => "0000000000000001", -- 1
892 => B"000100_1100_01_0000", -- "CMP $F23, Gr12" ; 
893 => "0000111100100011",
894 => B"001010_0000_00_0000", -- "BNE #PRINTLOOPX" ;  om vi inte loopat fÃÂ¶rdigt pÃÂ¥ x, gÃÂ¶r det igen -- 814
895 => "0000001101001000", -- 840
896 => B"000001_1101_00_0000", -- "ADD #1, Gr13" ; 
897 => "0000000000000001", -- 1
898 => B"000001_0111_01_0000", -- "ADD $F28, Gr7 " ; 
899 => "0000111100101000",
900 => B"000100_1101_01_0000", -- "CMP $F24, Gr13" ; 
901 => "0000111100100100",
902 => B"010111_1100_01_0000", -- "LOAD $F25, Gr12" ;  nollstÃÂ¤ll X, pÃÂ¥ nÃÂ¤sta rad
903 => "0000111100100101",
904 => B"001010_0000_00_0000", -- "BNE #PRINTLOOPX" ;  om vi inte loopat fÃÂ¤rdigt pÃÂ¥ Y, fortsÃÂ¤tt loopa -- 814
905 => "0000001101001000", -- 840
906 => B"001001_0000_01_0000", -- "BRA $F21" ; 
907 => "0000111100100001",
-- CLEARSCREEN -- 908
908 => B"010110_1110_01_0000", -- "STORE $F30, Gr14" ; 
909 => "0000111100110000",
910 => B"010011_1111_00_0000", -- "LSL #12, Gr15 " ; 
911 => "0000000000001100", -- 12
912 => B"010110_1111_01_0000", -- "STORE $F31, Gr15" ; 
913 => "0000111100110001",
914 => B"010111_1011_01_0000", -- "LOAD $F31, Gr11 " ; 
915 => "0000111100110001",
916 => B"010111_1100_00_0000", -- "LOAD #0, Gr12 " ; 
917 => "0000000000000000", -- 0
918 => B"010111_1101_00_0000", -- "LOAD #0, Gr13 " ; 
919 => "0000000000000000", -- 0
-- CLEARSCREENLOOPY -- 908
920 => B"010111_1100_00_0000", -- "LOAD #0, Gr12 " ; 
921 => "0000000000000000", -- 0
-- CLEARSCREENLOOPX -- 908
922 => B"010111_1110_00_0000", -- "LOAD #CLEARSCREENRETURN, Gr14 " ;  -- 908
923 => "0000001110011110", -- 926
924 => B"001001_0000_00_0000", -- "BRA #TOGMEM " ;  -- 736
925 => "0000001011100000", -- 736
-- CLEARSCREENRETURN -- 908
926 => B"011000_1011_00_0000", -- "GSTORE Gr11 " ; 
927 => "0000000000000000", -- 0
928 => B"000001_1100_00_0000", -- "ADD #1, Gr12 " ; 
929 => "0000000000000001", -- 1
930 => B"000100_1100_00_0000", -- "CMP #32, Gr12 " ; 
931 => "0000000000100000", -- 32
932 => B"001010_0000_00_0000", -- "BNE #CLEARSCREENLOOPX " ;  -- 908
933 => "0000001110011010", -- 922
934 => B"000001_1101_00_0000", -- "ADD #1, Gr13" ; 
935 => "0000000000000001", -- 1
936 => B"000100_1101_00_0000", -- "CMP #32, Gr13" ; 
937 => "0000000000100000", -- 32
938 => B"001010_0000_00_0000", -- "BNE #CLEARSCREENLOOPY " ;  -- 908
939 => "0000001110011000", -- 920
940 => B"001001_0000_01_0000", -- "BRA $F30 " ; 
941 => "0000111100110000",

---------------------------
--------------------------


2610 => X"0002",	-- Antal spelare


2640 => X"00A5",	-- p1 Start
2641 => X"035A",	-- p2 Start
2642 => X"0345",	-- p3 Start
2643 => X"00BA",	-- p4 Start

2644 => X"3000",	-- färger
2645 => X"4000",
2646 => X"5000",
2647 => X"6000",

2648 => X"0002",	-- start riktning
2649 => X"0004",
2650 => X"0001",
2651 => X"0003",

2652 => X"00A4",	-- start tail
2653 => X"035B",
2654 => X"0365",
2655 => X"009A",

2656 => X"01EF",	-- Äpple start pos



2825 => X"000F", 
2826 => X"FF0F", 
2827 => X"FF0F", 
2828 => X"FF0F", 
2829 => X"FF0F", 
2830 => X"FF00",

2833 => X"000F", 
2834 => X"000F", 
2835 => X"0F0F", 
2836 => X"000F", 
2837 => X"000F", 
2838 => X"00F0",

2841 => X"000F", 
2842 => X"FF0F", 
2843 => X"FF0F", 
2844 => X"F00F", 
2845 => X"F00F", 
2846 => X"00F0",

2850 => X"0F0F", 
2851 => X"000F", 
2852 => X"000F", 
2853 => X"000F", 
2854 => X"00F0",

2857 => X"000F", 
2858 => X"FF0F", 
2859 => X"000F", 
2860 => X"FF0F", 
2861 => X"FF0F", 
2862 => X"FF00",

2875 => X"000F",

2883 => X"00FF",

2891 => X"000F",

2899 => X"000F",

2907 => X"000F",

2915 => X"00FF", -- M 13
2916 => X"F000",

2931 => X"000F", -- M 15

2939 => X"00FF", -- M 16
2940 => X"F000",

2947 => X"000F", -- M 17

2953 => X"00F0", -- E 18
2954 => X"F000",
2955 => X"000F",
2957 => X"00FF",
2958 => X"F000",

2961 => X"00F0", -- E 19
2962 => X"F00F",
2963 => X"000F",
2964 => X"000F",
2966 => X"F000",

2969 => X"00FF", -- E 20 2808
2970 => X"F0FF",
2971 => X"FFFF",
2972 => X"FFFF",
2973 => X"F0FF",
2974 => X"F000",

2978 => X"F00F", -- I 21
2979 => X"000F",
2980 => X"000F",
2981 => X"00F0",

2986 => X"F000", -- I 22
2987 => X"000F",
2989 => X"00FF",
2990 => X"F000",

2995 => X"000F", -- M 23

3003 => X"00FF", -- M 24
3004 => X"F000",

3011 => X"000F", -- M 25

3027 => X"00FF", -- M 27
3028 => X"F000",

3036 => X"F000", -- Q 28

3043 => X"000F", -- M 29
3044 => X"F000",

3052 => X"F000", -- Q 30

3059 => X"00FF", -- M 31
3060 => X"F000",

3100 => X"0000",
3101 => X"0000",
3102 => X"FFFF",
3103 => X"FFFF",
3104 => X"FFFF",
3105 => X"FFFF",
3106 => X"FFFF",
3107 => X"FFFF",
3108 => X"FFFF",
3109 => X"FFFF",
3110 => X"FFFF",
3111 => X"FFFF",
3112 => X"FFFF",
3113 => X"FFFF",
3114 => X"FFFF",
3115 => X"FFFF",
3116 => X"FFFF",
3117 => X"FFFF",
3118 => X"FFFF",
3119 => X"FFFF",
3120 => X"FFFF",
3121 => X"FFFF",
3122 => X"FFFF",
3123 => X"FFFF",
3124 => X"F0F0",
3125 => X"0F0F",
3126 => X"FFFF",
3127 => X"FFFF",
3128 => X"FF00",
3129 => X"00FF",
3130 => X"FFFF",
3131 => X"FF00",
3132 => X"00FF",
3133 => X"FFFF",
3134 => X"FFFF",
3135 => X"FFFF",
3136 => X"FFFF",
3137 => X"FFFF",
3138 => X"FFFF",
3139 => X"FFFF",
3140 => X"FFFF",
3141 => X"FFFF",
3142 => X"FFFF",
3143 => X"FFFF",
3144 => X"FFFF",
3145 => X"FFFF",
3146 => X"FFFF",
3147 => X"FFFF",
3148 => X"FFFF",
3149 => X"FFFF",
3150 => X"FFFF",
3151 => X"FFFF",
3152 => X"FFFF",
3153 => X"FFFF",
3154 => X"FFFF",
3155 => X"FFFF",
3156 => X"FFFF",
3157 => X"FFFF",
3158 => X"0000",
3159 => X"FFFF",
3160 => X"FFFF",
3161 => X"FFFF",
3162 => X"0000",
3163 => X"0000",

--PLAYERS
3164 => X"00FF", 
3165 => X"F0F0", 
3166 => X"00FF", 
3167 => X"F0F0", 
3168 => X"F0FF", 
3169 => X"F0FF", 
3170 => X"F0FF", 
3171 => X"F000",
3172 => X"00F0", 
3173 => X"F0F0", 
3174 => X"00F0", 
3175 => X"F0F0", 
3176 => X"F0F0", 
3177 => X"00F0", 
3178 => X"F0F0",
3180 => X"00FF", 
3181 => X"F0F0", 
3182 => X"00FF", 
3183 => X"F00F", 
3184 => X"00FF", 
3185 => X"00FF", 
3186 => X"00FF", 
3187 => X"F000", 
3188 => X"00F0", 
3189 => X"00F0", 
3190 => X"00F0", 
3191 => X"F00F", 
3192 => X"00F0", 
3193 => X"00F0", 
3194 => X"F000", 
3195 => X"F000", 
3196 => X"00F0", 
3197 => X"00FF", 
3198 => X"F0F0", 
3199 => X"F00F", 
3200 => X"00FF", 
3201 => X"F0F0", 
3202 => X"F0FF", 
3203 => X"F000",

3292 => X"00F0", 
3293 => X"000F", 
3294 => X"000F", 
3295 => X"F000", 
3296 => X"FFFF", 
3297 => X"00FF", 
3298 => X"FFFF",
3299 => X"F000",

3300 => X"00F0", 
3301 => X"000F", 
3302 => X"00F0", 
3303 => X"0F00", 
3304 => X"F000", 
3305 => X"F000", 
3306 => X"0F00",

3308 => X"00F0", 
3309 => X"000F", 
3310 => X"0F00", 
3311 => X"00F0", 
3312 => X"F000", 
3313 => X"F000", 
3314 => X"0F00",

3316 => X"00F0", 
3317 => X"000F", 
3318 => X"0F00", 
3319 => X"00F0", 
3320 => X"F000", 
3321 => X"F000", 
3322 => X"0F00",

3324 => X"00F0", 
3325 => X"000F", 
3326 => X"0FFF", 
3327 => X"FFF0", 
3328 => X"FFFF", 
3330 => X"0F00",

3332 => X"00F0", 
3333 => X"000F", 
3334 => X"0F00", 
3335 => X"00F0", 
3336 => X"F000", 
3337 => X"F000", 
3338 => X"0F00",

3340 => X"00F0", 
3341 => X"000F", 
3342 => X"0F00", 
3343 => X"00F0", 
3344 => X"F000", 
3345 => X"F000", 
3346 => X"0F00",

3348 => X"000F", 
3349 => X"00F0", 
3350 => X"0F00", 
3351 => X"00F0", 
3352 => X"F000", 
3353 => X"F000", 
3354 => X"0F00",

3357 => X"FF00", 
3358 => X"0F00", 
3359 => X"00F0", 
3360 => X"F000", 
3361 => X"F000", 
3362 => X"0F00",

3370 => X"0FFF", 
3372 => X"FFFF", 
3373 => X"F000",
3374 => X"FFFF", 
3375 => X"F000",
3376 => X"FFFF", 
3377 => X"F000",
3378 => X"0FFF", 

3380 => X"000F", 3381 => X"FF00", 3382 => X"FF00", 3383 => X"F000", 3384 => X"F0FF", 3385 => X"FF00",
3386 => X"00F0", 3387 => X"000F", 3388 => X"00F0", 3389 => X"FF0F", 3390 => X"F0F0",
3392 => X"00F0", 3393 => X"000F", 3394 => X"00F0", 3395 => X"FF0F", 3396 => X"F0FF", 3397 => X"F000",
3398 => X"00F0", 3399 => X"FF0F", 3400 => X"FFF0", 3401 => X"F0F0", 3402 => X"F0F0",
3404 => X"00F0", 3405 => X"0F0F", 3406 => X"00F0", 3407 => X"F0F0", 3408 => X"F0F0",
3410 => X"000F", 3411 => X"FF0F", 3412 => X"00F0", 3413 => X"F000", 3414 => X"F0FF", 3415 => X"FF00",

3422 => X"000F", 3423 => X"F00F", 3424 => X"000F", 3425 => X"0FFF", 3426 => X"F0FF", 3427 => X"F000",
3428 => X"00F0", 3429 => X"0F0F", 3430 => X"000F", 3431 => X"0F00", 3432 => X"00F0", 3433 => X"0F00",
3434 => X"00F0", 3435 => X"0F0F", 3436 => X"000F", 3437 => X"0FFF", 3438 => X"00F0", 3439 => X"0F00",
3440 => X"00F0", 3441 => X"0F0F", 3442 => X"000F", 3443 => X"0F00", 3444 => X"00FF", 3445 => X"F000",
3446 => X"00F0", 3447 => X"0F00", 3448 => X"F0F0", 3449 => X"0F00", 3450 => X"00F0", 3451 => X"0F00",
3452 => X"000F", 3453 => X"F000", 3454 => X"0F00", 3455 => X"0FFF", 3456 => X"F0F0", 3457 => X"0F00",

others => B"000000_0000_00_0000"

	);
	signal in_tmp : std_logic_vector(15 downto 0) := "0000000000000000";
	signal out_tmp : std_logic_vector(15 downto 0) := "0000000000000000";
begin
	process(clk)
	begin
		if rising_edge(clk) then
			if frombus="0010" then
				pmem(conv_integer(adr)) <= buss;
			end if;
			out_tmp <= pmem(conv_integer(adr));
		end if;
	end process;
	bpm <= out_tmp;
end behav;
