0 => B"000000_0000_00_0000", -- NOPs
1 => B"000000_0000_00_0000", -- NOPs
-- MENU -- 2
2 => B"010111_1100_00_0000", -- "LOAD #0, Gr12" ;  ladda in 0 som startvÃÂ¤rde fÃÂ¶r x
3 => "0000000000000000", -- 0
4 => B"010111_1101_00_0000", -- "LOAD #0, Gr13" ;  ladda in 0 som startvÃÂ¤rde fÃÂ¶r y
5 => "0000000000000000", -- 0
-- MENULOOPX -- 2
6 => B"010111_1110_00_0000", -- "LOAD #MENULOOPXRETURN, Gr14" ;  -- 10
7 => "0000000000001010", -- 10
8 => B"001001_0000_00_0000", -- "BRA #TOGMEM" ;  -- 156
9 => "0000000010011100", -- 156
-- MENULOOPXRETURN -- 10
10 => B"010110_1101_01_0000", -- "STORE $D00, Gr13" ;  LÃÂ¤gg y * (32bitar = 8 words) i Gr2 som ÃÂ¤r word-index i statiska bilden
11 => "0000110100000000",
12 => B"010111_0010_01_0000", -- "LOAD $D00, Gr2" ; 
13 => "0000110100000000",
14 => B"010011_0010_00_0000", -- "LSL #3, Gr2" ; 
15 => "0000000000000011", -- 3
16 => B"010110_1100_01_0000", -- "STORE $D00, Gr12" ;  LÃÂ¤gg till x // 4 till Gr3, fÃÂ¶r att fÃÂ¥ rÃÂ¤tt word-offset i x-led
17 => "0000110100000000",
18 => B"010111_0011_01_0000", -- "LOAD $D00, Gr3" ; 
19 => "0000110100000000",
20 => B"010010_0011_00_0000", -- "LSR #2, Gr3" ; 
21 => "0000000000000010", -- 2
22 => B"010110_0011_01_0000", -- "STORE $D00, Gr3" ; 
23 => "0000110100000000",
24 => B"000001_0010_01_0000", -- "ADD $D00, Gr2" ; 
25 => "0000110100000000",
26 => B"010110_1100_01_0000", -- "STORE $D00, Gr12" ;  Spara (x mod 4) - 1 till Gr3, vilket ÃÂ¤r tile-index i wordet
27 => "0000110100000000",
28 => B"010111_0011_01_0000", -- "LOAD $D00, Gr3" ; 
29 => "0000110100000000",
30 => B"000101_0011_00_0000", -- "AND #$0003, Gr3" ;  MOD #4
31 => "0000000000000011", -- 3
32 => B"010111_0100_11_0010", -- "LOAD $B00, Gr4, Gr2" ;  Ladda in rÃÂ¤tt word frÃÂ¥n bilden till register 4
33 => "0000101100000000",
34 => B"010011_0011_00_0000", -- "LSL #2, Gr3" ; 
35 => "0000000000000010", -- 2
36 => B"010110_0011_01_0000", -- "STORE $D00, Gr3" ;  Shifta wordet sÃÂ¥ att vÃÂ¥r tile hamnar lÃÂ¤ngs till vÃÂ¤nster (MSBs, vilket ÃÂ¤r vad GMEMet tar frÃÂ¥n bussen)
37 => "0000110100000000",
38 => B"010011_0100_01_0000", -- "LSL $D00, Gr4" ; 
39 => "0000110100000000",
40 => B"000101_0100_00_0000", -- "AND #$F000, Gr4" ;  ANDa bort de bitar som lÃÂ¥g efter vÃÂ¥r tile i wordet
41 => "1111000000000000",
42 => B"011000_0100_00_0000", -- "GSTORE Gr4" ; 
43 => "0000000000000000", -- 0
44 => B"000001_1100_00_0000", -- "ADD #1, Gr12" ; 
45 => "0000000000000001", -- 1
46 => B"000100_1100_00_0000", -- "CMP #32, Gr12" ; 
47 => "0000000000100000", -- 32
48 => B"001010_0000_00_0000", -- "BNE #MENULOOPX" ;  om vi inte loopat fÃÂ¶rdigt pÃÂ¥ x, gÃÂ¶r det igen -- 2
49 => "0000000000000110", -- 6
50 => B"000001_1101_00_0000", -- "ADD #1, Gr13" ; 
51 => "0000000000000001", -- 1
52 => B"000100_1101_00_0000", -- "CMP #32, Gr13" ; 
53 => "0000000000100000", -- 32
54 => B"010111_1100_00_0000", -- "LOAD #0, Gr12" ;  nollstÃÂ¤ll X, pÃÂ¥ nÃÂ¤sta rad
55 => "0000000000000000", -- 0
56 => B"001010_0000_00_0000", -- "BNE #MENULOOPX" ;  om vi inte loopat fÃÂ¤rdigt pÃÂ¥ Y, fortsÃÂ¤tt loopa -- 2
57 => "0000000000000110", -- 6
-- MENULOOP -- 2
58 => B"011001_0000_00_0000", -- "SPI Gr0" ;  ladda SPI-data till gr0
59 => "0000000000000000", -- 0
60 => B"000101_0000_00_0000", -- "AND #$000F, Gr0" ;  anda bort andra joysticks
61 => "0000000000001111", -- 15
62 => B"000100_0000_00_0000", -- "CMP #1, Gr0" ; 
63 => "0000000000000001", -- 1
64 => B"001011_0000_00_0000", -- "BEQ #UPDIRSPEED" ;  -- 80
65 => "0000000001010000", -- 80
66 => B"000100_0000_00_0000", -- "CMP #2, Gr0" ; 
67 => "0000000000000010", -- 2
68 => B"001011_0000_00_0000", -- "BEQ #RIGHTDIRSPEED" ;  -- 84
69 => "0000000001010100", -- 84
70 => B"000100_0000_00_0000", -- "CMP #3, Gr0" ; 
71 => "0000000000000011", -- 3
72 => B"001011_0000_00_0000", -- "BEQ #DOWNDIRSPEED" ;  -- 88
73 => "0000000001011000", -- 88
74 => B"000100_0000_00_0000", -- "CMP #4, Gr0" ; 
75 => "0000000000000100", -- 4
76 => B"001011_0000_00_0000", -- "BEQ #LEFTDIRSPEED" ;  -- 92
77 => "0000000001011100", -- 92
78 => B"001001_0000_00_0000", -- "BRA #MENULOOP" ;  var inget hÃÂ¥ll, fortsÃÂ¤tt kolla. -- 2
79 => "0000000000111010", -- 58
-- UPDIRSPEED -- 80
80 => B"010111_0000_00_0000", -- "LOAD  #1000, Gr0" ; 
81 => "0000001111101000", -- 1000
82 => B"001001_0000_00_0000", -- "BRA #STORESPEED" ;  -- 96
83 => "0000000001100000", -- 96
-- RIGHTDIRSPEED -- 84
84 => B"010111_0000_00_0000", -- "LOAD  #800, Gr0" ; 
85 => "0000001100100000", -- 800
86 => B"001001_0000_00_0000", -- "BRA #STORESPEED," ;  -- 96
87 => "0000000001100000", -- 96
-- DOWNDIRSPEED -- 88
88 => B"010111_0000_00_0000", -- "LOAD  #600, Gr0" ; 
89 => "0000001001011000", -- 600
90 => B"001001_0000_00_0000", -- "BRA #STORESPEED" ;  -- 96
91 => "0000000001100000", -- 96
-- LEFTDIRSPEED -- 92
92 => B"010111_0000_00_0000", -- "LOAD  #400, Gr0" ; 
93 => "0000000110010000", -- 400
94 => B"001001_0000_00_0000", -- "BRA #STORESPEED" ;  -- 96
95 => "0000000001100000", -- 96
-- STORESPEED -- 96
96 => B"010110_0000_00_0000", -- "STORE #$CC1, Gr0" ;  lÃÂ¤gg in vald hastighet pÃÂ¥ rÃÂ¤tt minnesplats
97 => "0000110011000001",
98 => B"011010_0000_00_0000", -- "UART" ; 
99 => "0000000000000000", -- 0
100 => B"010111_0000_00_0000", -- "LOAD #0, Gr0" ; 
101 => "0000000000000000", -- 0
-- UARTLOOP -- 102
102 => B"010000_0000_00_0000", -- "BOU #UARTREADY " ; kolla om uart har ett word redo att hÃÂ¤mtas -- 106
103 => "0000000001101010", -- 106
104 => B"001001_0000_00_0000", -- "BRA #UARTLOOP " ; fortsÃÂ¤tt vÃÂ¤nta -- 102
105 => "0000000001100110", -- 102
-- UARTREADY -- 106
106 => B"011010_0001_00_0000", -- "UART Gr1" ;  ladda Uart-wordet till Gr1
107 => "0000000000000000", -- 0
108 => B"010110_0001_00_0000", -- "STORE #$C80, Gr1, Gr0" ;  LÃÂ¤gg till wordet pÃÂ¥ rÃÂ¤tt stÃÂ¤lle. anvÃÂ¤nder Gr0 som index
109 => "0000110010000000",
110 => B"000001_0000_00_0000", -- "ADD #1, Gr0" ;  incrementera countern
111 => "0000000000000001", -- 1
112 => B"000100_0000_00_0000", -- "CMP #64, Gr0" ;  kolla om vi ÃÂ¤r fÃÂ¤rdiga
113 => "0000000001000000", -- 64
114 => B"001011_0000_00_0000", -- "BEQ #PRINTMAP" ;  isf, hoppa till spelet -- 118
115 => "0000000001110110", -- 118
116 => B"001001_0000_00_0000", -- "BRA #UARTLOOP" ;  annars, fortsÃÂ¤tt leta words -- 102
117 => "0000000001100110", -- 102
-- PRINTMAP -- 118
118 => B"010111_0000_00_0000", -- "LOAD #0, Gr0" ; 
119 => "0000000000000000", -- 0
120 => B"010111_0001_00_0000", -- "LOAD #0, Gr1" ; 
121 => "0000000000000000", -- 0
-- PRINTMAPLOOPX -- 122
122 => B"010110_0000_01_0000", -- "STORE $F00, Gr0" ;  kopiera X och Y till in-register till TOGMEM -- 156
123 => "0000111100000000",
124 => B"010110_0001_01_0000", -- "STORE $F01, Gr1" ; 
125 => "0000111100000001",
126 => B"010111_1100_01_0000", -- "LOAD $F00, Gr12" ; 
127 => "0000111100000000",
128 => B"010111_1101_01_0000", -- "LOAD $F01, Gr13" ; 
129 => "0000111100000001",
130 => B"010111_1110_00_0000", -- "LOAD #PRINTMAPRETURN, Gr14" ;  return-adress -- 118
131 => "0000000010000110", -- 134
132 => B"001001_0000_00_0000", -- "BRA #TOGMEM" ;  -- 156
133 => "0000000010011100", -- 156
-- PRINTMAPRETURN -- 118
134 => B"010111_1110_00_0000", -- "LOAD #PRINTMAPRETURN2, Gr14" ;  -- 138
135 => "0000000010001010", -- 138
136 => B"001001_0000_00_0000", -- "BRA #GETOBSTACLEBYGMEM" ;  -- 184
137 => "0000000010111000", -- 184
-- PRINTMAPRETURN2 -- 138
138 => B"011000_1011_00_0000", -- "GSTORE Gr11" ;  F ÃÂ¤r tile-vÃÂ¤rdet fÃÂ¶r hinder
139 => "0000000000000000", -- 0
140 => B"000001_0000_00_0000", -- "ADD #1, Gr0" ;  ÃÂ¶ka X
141 => "0000000000000001", -- 1
142 => B"000100_0000_00_0000", -- "CMP #32, Gr0" ; 
143 => "0000000000100000", -- 32
144 => B"001010_0000_00_0000", -- "BNE #PRINTMAPLOOPX" ;  om vi inte ÃÂ¤r fÃÂ¤rdiga med raden -- 122
145 => "0000000001111010", -- 122
-- PRINTMAPLOOPY -- 146
146 => B"010111_0000_00_0000", -- "LOAD #0, Gr0" ; 
147 => "0000000000000000", -- 0
148 => B"000001_0001_00_0000", -- "ADD #1, Gr1" ; 
149 => "0000000000000001", -- 1
150 => B"000100_0001_00_0000", -- "CMP #32, Gr1" ; 
151 => "0000000000100000", -- 32
152 => B"001010_0000_00_0000", -- "BNE #PRINTMAPLOOPX" ;  om vi inte ÃÂ¤r fÃÂ¤rdiga, fortsÃÂ¤tt loopa -- 122
153 => "0000000001111010", -- 122
-- INFINITE -- 154
154 => B"001001_0000_00_0000", -- "BRA #INFINITE" ;  gaaaah oÃÂ¤ÃÂ¤ÃÂ¤ÃÂ¤ÃÂ¤ÃÂ¤ÃÂ¤ndlig -- 154
155 => "0000000010011010", -- 154
-- TOGMEM -- 156
156 => B"010110_1100_01_0000", -- "STORE $F00, Gr12" ;  spara undan X, och Y
157 => "0000111100000000",
158 => B"010110_1101_01_0000", -- "STORE $F01, Gr13" ; 
159 => "0000111100000001",
160 => B"010111_1111_01_0000", -- "LOAD $F01, Gr15" ;  ladda in Y till Gr15.
161 => "0000111100000001",
162 => B"010011_1111_00_0000", -- "LSL #5, Gr15" ;  shifta ut Y-bitarna till sin rÃÂ¤tta plats
163 => "0000000000000101", -- 5
164 => B"000110_1111_01_0000", -- "OR $F00, Gr15" ;  ORa in X-delen
165 => "0000111100000000",
166 => B"010110_1110_01_0000", -- "STORE $AF8, Gr14 " ; lÃÂ¤gg returnadressen pÃÂ¥ ett stÃÂ¤lle i minnet
167 => "0000101011111000",
168 => B"001001_0000_01_0000", -- "BRA $AF8" ;  returnera
169 => "0000101011111000",
-- FROMGMEM -- 170
170 => B"010110_1111_01_0000", -- "STORE $F00, Gr15" ;  spara undan in-vÃÂ¤rdet
171 => "0000111100000000",
172 => B"010111_1100_01_0000", -- "LOAD $F00, Gr12" ;  ladda till X
173 => "0000111100000000",
174 => B"000101_1100_00_0000", -- "AND #$001F, Gr12" ;  ANDa bort y-delen frÃÂ¥n x
175 => "0000000000011111", -- 31
176 => B"010111_1101_01_0000", -- "LOAD $F00, Gr13" ; 
177 => "0000111100000000",
178 => B"010010_1101_00_0000", -- "LSR #5, Gr13" ;  Shifta bort y-delen till LSBs
179 => "0000000000000101", -- 5
180 => B"010110_1110_01_0000", -- "STORE $AF8, Gr14 " ; lÃÂ¤gg returnadressen pÃÂ¥ ett stÃÂ¤lle i minnet
181 => "0000101011111000",
182 => B"001001_0000_01_0000", -- "BRA $AF8" ; 
183 => "0000101011111000",
-- GETOBSTACLEBYGMEM -- 184
184 => B"010110_1111_01_0000", -- "STORE $F00, Gr15" ;  spara GMEM-posen pÃÂ¥ F00
185 => "0000111100000000",
186 => B"010111_1100_01_0000", -- "LOAD $F00, Gr12" ;  ladda ovanstÃÂ¥ende
187 => "0000111100000000",
188 => B"000101_1100_00_0000", -- "AND #$001F, Gr12" ;  ta bort Y-bitarna
189 => "0000000000011111", -- 31
190 => B"010010_1111_00_0000", -- "LSR #5, Gr15" ;  shifta bort Y-bitarna till LSBs
191 => "0000000000000101", -- 5
192 => B"010011_1111_00_0000", -- "LSL #5, Gr15" ; 
193 => "0000000000000101", -- 5
194 => B"010110_1111_01_0000", -- "STORE $F00, Gr15" ;  addera de bÃÂ¥da och sÃÂ¤tt resultat i Gr12
195 => "0000111100000000",
196 => B"000001_1100_01_0000", -- "ADD $F00, Gr12" ; 
197 => "0000111100000000",
198 => B"010110_1100_01_0000", -- "STORE $F00, Gr12" ;  kopiera datat till Gr15
199 => "0000111100000000",
200 => B"010111_1111_01_0000", -- "LOAD $F00, Gr15" ; 
201 => "0000111100000000",
202 => B"010010_1111_00_0000", -- "LSR #4, Gr15" ; 
203 => "0000000000000100", -- 4
204 => B"000101_1100_00_0000", -- "AND #$000F, Gr12" ; 
205 => "0000000000001111", -- 15
206 => B"010111_1010_11_1111", -- "LOAD $C80, Gr10, Gr15" ;  ladda rÃÂ¤tt word i kartan till Gr10
207 => "0000110010000000",
208 => B"010110_1100_01_0000", -- "STORE $F00, Gr12" ; 
209 => "0000111100000000",
210 => B"010011_1111_01_0000", -- "LSL $F00, Gr15" ;  Shifta wordet till vÃÂ¤nster Gr12 antal gÃÂ¥nger
211 => "0000111100000000",
212 => B"000101_1111_00_0000", -- "AND #$8000, Gr15" ;  anda bort all annan data
213 => "1000000000000000",
214 => B"010111_1011_00_0000", -- "LOAD #$0000, Gr11" ; ladda ett standardvÃÂ¤rde till Gr11
215 => "0000000000000000", -- 0
216 => B"000100_1111_00_0000", -- "CMP #$8000, Gr15" ;  kolla om det ÃÂ¤r en etta vi shiftat in
217 => "1000000000000000",
218 => B"001010_0000_00_0000", -- "BNE #WASNOTOBSTACLE" ;  om sÃÂ¥ inte var fallet -- 222
219 => "0000000011011110", -- 222
220 => B"010111_1011_00_0000", -- "LOAD #$FFFF, Gr11" ;  annars (var hinder dÃÂ¤r)
221 => "1111111111111111",
-- WASNOTOBSTACLE -- 222
222 => B"010110_1110_01_0000", -- "STORE $AF8, Gr14 " ; lÃÂ¤gg returnadressen pÃÂ¥ ett stÃÂ¤lle i minnet
223 => "0000101011111000",
224 => B"001001_0000_01_0000", -- "BRA $AF8" ;  return
225 => "0000101011111000",
others => B"000000_0000_00_0000"
